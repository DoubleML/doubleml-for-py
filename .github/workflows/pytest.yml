# Workflow based on https://github.com/actions/starter-workflows/blob/main/ci/python-package.yml

name: build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  schedule:
    - cron: "0 9 * * 1,3,5"
  workflow_dispatch:

jobs:
  build:

    runs-on: ${{ matrix.config.os }}
    name: ${{ matrix.config.os }} (${{ matrix.config.python-version }})

    strategy:
      matrix:
        config:
          - {os: 'ubuntu-latest', python-version: '3.9'}
          - {os: 'windows-latest', python-version: '3.9'}
          - {os: 'macOS-latest', python-version: '3.9'}
          - {os: 'ubuntu-latest', python-version: '3.10'}
          - {os: 'ubuntu-latest', python-version: '3.11'}
          - {os: 'ubuntu-latest', python-version: '3.12'}

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 2
    - name: Set up Python ${{ matrix.config.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.config.python-version }}
    - name: Install OpenMP runtime for unit tests with xgboost learners
      if: matrix.config.os == 'macOS-latest'
      run: brew install libomp
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev,rdd]
    - name: Lint with ruff
      run: |
        # stop the build if there are Python syntax errors or undefined names
        ruff check . --select E9,F63,F7,F82 --output-format=full --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        ruff check . --exit-zero --line-length 127 --output-format=full --statistics
    - name: Check code formatting with black
      run: |
        black --check --verbose . || echo "Warning: Code is not formatted according to black"
        exit 0
    - name: Test with pytest
      if: |
        matrix.config.os != 'ubuntu-latest' ||
        matrix.config.python-version != '3.9'
      run: |
        pytest -m ci
        pytest -m ci_rdd

    - name: Test with pytest and coverage
      if: |
        matrix.config.os == 'ubuntu-latest' &&
        matrix.config.python-version == '3.9'
      run: |
        pip install pytest-cov
        pytest --cov=./ --cov-report=xml --cov-report=html

    - name: Archive code coverage results
      if: |
        matrix.config.os == 'ubuntu-latest' &&
        matrix.config.python-version == '3.9'
      uses: actions/upload-artifact@v4
      with:
        name: code-coverage-report
        path: |
          coverage.xml
          htmlcov/
        retention-days: 5

    - name: Upload coverage to Codecov
      if: |
        matrix.config.os == 'ubuntu-latest' &&
        matrix.config.python-version == '3.9'
      uses: codecov/codecov-action@v5
      with:
        fail_ci_if_error: false
        files: ./coverage.xml
        flags: unittests
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Upload coverage to codacy
      if: |
        matrix.config.os == 'ubuntu-latest' &&
        matrix.config.python-version == '3.9'
      continue-on-error: true
      uses: codacy/codacy-coverage-reporter-action@v1
      with:
        project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
        coverage-reports: ./coverage.xml
